{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "link-preview",
  "type": "registry:block",
  "title": "Link Preview",
  "description": "A link preview component.",
  "dependencies": [
    "@radix-ui/react-hover-card",
    "framer-motion",
    "qss"
  ],
  "files": [
    {
      "path": "registry/brnd/link-preview/link-preview.tsx",
      "content": "\"use client\";\nimport { cn } from \"@/lib/utils\";\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\";\nimport {\n  AnimatePresence,\n  motion,\n  useMotionValue,\n  useSpring,\n} from \"framer-motion\";\nimport Image from \"next/image\";\nimport Link from \"next/link\";\nimport { encode } from \"qss\";\nimport React from \"react\";\n\ntype LinkPreviewProps = {\n  children: React.ReactNode;\n  url: string;\n  className?: string;\n  width?: number;\n  height?: number;\n  quality?: number;\n} & (\n  | { isStatic: true; imageSrc: string }\n  | { isStatic?: false; imageSrc?: never }\n);\n\nexport const LinkPreview = ({\n  children,\n  url,\n  className,\n  width = 200,\n  height = 125,\n  quality = 50,\n  isStatic = false,\n  imageSrc = \"\",\n}: LinkPreviewProps) => {\n  const src = isStatic\n    ? imageSrc\n    : `https://api.microlink.io/?${encode({\n        url,\n        screenshot: true,\n        meta: false,\n        embed: \"screenshot.url\",\n        colorScheme: \"dark\",\n        \"viewport.isMobile\": true,\n        \"viewport.deviceScaleFactor\": 1,\n        \"viewport.width\": width * 3,\n        \"viewport.height\": height * 3,\n      })}`;\n\n  const [isOpen, setOpen] = React.useState(false);\n  const [isMounted, setIsMounted] = React.useState(false);\n\n  React.useEffect(() => {\n    setIsMounted(true);\n  }, []);\n\n  const springConfig = { stiffness: 100, damping: 15 };\n  const x = useMotionValue(0);\n  const translateX = useSpring(x, springConfig);\n\n  const handleMouseMove = (event: React.MouseEvent<HTMLAnchorElement>) => {\n    const targetRect = event.currentTarget.getBoundingClientRect();\n    const eventOffsetX = event.clientX - targetRect.left;\n    const offsetFromCenter = (eventOffsetX - targetRect.width / 2) / 2;\n    x.set(offsetFromCenter);\n  };\n\n  return (\n    <>\n      {isMounted && (\n        <div className=\"hidden\">\n          <Image\n            src={src}\n            width={width}\n            height={height}\n            quality={quality}\n            priority\n            alt=\"hidden image\"\n            style={{ objectFit: \"cover\" }}\n          />\n        </div>\n      )}\n\n      <HoverCardPrimitive.Root\n        openDelay={50}\n        closeDelay={100}\n        onOpenChange={setOpen}\n      >\n        <HoverCardPrimitive.Trigger\n          onMouseMove={handleMouseMove}\n          className={cn(\"text-black dark:text-white\", className)}\n          asChild\n        >\n          <a href={url}>{children}</a>\n        </HoverCardPrimitive.Trigger>\n\n        <HoverCardPrimitive.Content\n          className=\"[transform-origin:var(--radix-hover-card-content-transform-origin)]\"\n          side=\"top\"\n          align=\"center\"\n          sideOffset={10}\n        >\n          <AnimatePresence>\n            {isOpen && (\n              <motion.div\n                initial={{ opacity: 0, y: 20, scale: 0.6 }}\n                animate={{\n                  opacity: 1,\n                  y: 0,\n                  scale: 1,\n                  transition: {\n                    type: \"spring\",\n                    stiffness: 260,\n                    damping: 20,\n                  },\n                }}\n                exit={{ opacity: 0, y: 20, scale: 0.6 }}\n                className=\"shadow-xl rounded-xl\"\n                style={{\n                  x: translateX,\n                }}\n              >\n                <Link\n                  href={url}\n                  className=\"block p-1 bg-white border-2 border-transparent shadow rounded-xl hover:border-neutral-200 dark:hover:border-neutral-800\"\n                  style={{ fontSize: 0 }}\n                >\n                  <Image\n                    src={src}\n                    width={width}\n                    height={height}\n                    quality={quality}\n                    priority\n                    className=\"rounded-lg\"\n                    alt=\"preview image\"\n                    style={{ objectFit: \"cover\" }}\n                  />\n                </Link>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </HoverCardPrimitive.Content>\n      </HoverCardPrimitive.Root>\n    </>\n  );\n};\n",
      "type": "registry:component"
    }
  ]
}